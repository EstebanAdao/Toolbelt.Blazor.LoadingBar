@page "/fetchdata"
@using SampleSite.Shared
@inject SampleSite.Client.Service.WeatherForecastService WeatherForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>
<p>
    <button class="btn btn-primary" @onclick="(()=>ReFetchAsync(wait: true))">Re-fetch</button>
    <button class="btn btn-primary" @onclick="(()=>ReFetchAsync(wait: false))">Re-fetch with No-Wait</button>
    <button class="btn btn-primary" @onclick="(()=>FetchByHttpPostAsync(wait: true))">Fetch by POST</button>
    <button class="btn btn-primary" @onclick="(()=>FetchByHttpPostAsync(wait: false))">Fetch by POST with No-Wait</button>
</p>
@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await WeatherForecastService.FetchForecastsAsync();
    }

    private async Task ReFetchAsync(bool wait)
    {
        forecasts = null;
        forecasts = await WeatherForecastService.FetchForecastsAsync(wait);
    }

    private async Task FetchByHttpPostAsync(bool wait)
    {
        forecasts = null;
        forecasts = await WeatherForecastService.FetchForecastsByPostAsync(wait);
    }
}
